/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Notes.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Notes
 #	author : miyako
 #	2020/09/05
 #
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Notes.h"

//#ifndef errAEEventWouldRequireUserConsent
//enum {
//    errAEEventWouldRequireUserConsent     =     -1744
//};
//#endif

void requestPermission(){
    
    if (@available(macOS 10.14, *)) {
        OSStatus status;
        
        /*
         alternatively
         NSAppleEventDescriptor *targetAppEventDescriptor;
         targetAppEventDescriptor = [NSAppleEventDescriptor descriptorWithBundleIdentifier:@"com.apple.Notes"];
         and pass targetAppEventDescriptor.aeDesc to AEDeterminePermissionToAutomateTarget()
         */
        
        AEAddressDesc addressDesc;
        NSString *bundleIdentifier = @"com.apple.Notes";
        const char *bundleIdentifierCString = [bundleIdentifier cStringUsingEncoding:NSUTF8StringEncoding];
        if(AECreateDesc(typeApplicationBundleID, bundleIdentifierCString, strlen(bundleIdentifierCString), &addressDesc) == noErr)
        {
            status = AEDeterminePermissionToAutomateTarget(&addressDesc, typeWildCard, typeWildCard, true);
            AEDisposeDesc(&addressDesc);
            
            switch (status) {
                case errAEEventWouldRequireUserConsent:
                    NSLog(@"Automation permission pending for %@", bundleIdentifier);
                    break;
                case noErr:
                    NSLog(@"Automation permission granted for %@", bundleIdentifier);
                    break;
                case errAEEventNotPermitted:
                    NSLog(@"Automation permission denied for %@", bundleIdentifier);
                    break;
                case procNotFound:
                    NSLog(@"Automation permission unknown for %@", bundleIdentifier);
                    break;
                default:
                    break;
            }
        }
    }
}

#pragma mark DateFormatter

#define DATE_FORMAT_ISO @"yyyy-MM-dd'T'HH:mm:ss"
#define DATE_FORMAT_ISO_GMT @"yyyy-MM-dd'T'HH:mm:ss'Z'"

namespace DateFormatter
{
NSDateFormatter *ISO;
NSDateFormatter *GMT;

void setup()
{
    GMT = [[NSDateFormatter alloc]init];
    [GMT setDateFormat:DATE_FORMAT_ISO_GMT];
    [GMT setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
    
    ISO = [[NSDateFormatter alloc]init];
    [ISO setDateFormat:DATE_FORMAT_ISO];
    [ISO setTimeZone:[NSTimeZone localTimeZone]];
}

void clear()
{
    [GMT release];
    [ISO release];
}

}

#pragma mark SQL

namespace SQL
{
NSString *toString(const unsigned char *value)
{
    return value ? [NSString stringWithUTF8String:(const char *)value] : @"";
}
}

#pragma mark Notes

//Automation permission unknown for com.apple.Notes

namespace Notes
{
static NSString *absolutePath = [[NSWorkspace sharedWorkspace]absolutePathForAppBundleWithIdentifier:NOTES_APP_ID];
static NSBundle *bundle = [NSBundle bundleWithPath:absolutePath];
static NSRegularExpression *attachment_regex = [NSRegularExpression regularExpressionWithPattern:@"(?:x-coredata:\\/\\/).*\\/ICAttachment\\/p(\\d+)"
                                                                                         options:NSRegularExpressionCaseInsensitive
                                                                                           error:nil];
const char *sqlPath;

NSString *mediaPath = nil;
NSString *previewPath = nil;
NSString *fallbackImagesPath = nil;

const char *SQL_GET_NOTE_ATTACHMENT_TYPE = "\
SELECT \n\
ZICCLOUDSYNCINGOBJECT.ZTYPEUTI, \n\
ZICCLOUDSYNCINGOBJECT.ZIDENTIFIER \n\
FROM \n\
ZICCLOUDSYNCINGOBJECT \n\
WHERE \n\
ZICCLOUDSYNCINGOBJECT.Z_PK = ? \n\
LIMIT 1;";

const char *SQL_GET_NOTE_ATTACHMENT = "\
SELECT \n\
ZICCLOUDSYNCINGOBJECT.ZIDENTIFIER, \n\
ZICCLOUDSYNCINGOBJECT.ZFILENAME \n\
FROM \n\
ZICCLOUDSYNCINGOBJECT, \n\
ZICCLOUDSYNCINGOBJECT AS A \n\
WHERE \n\
A.Z_PK = ? \n\
AND \n\
ZICCLOUDSYNCINGOBJECT.Z_PK = A.ZMEDIA;";

const char *SQL_GET_NOTE_ATTACHMENT_PREVIEW = "\
SELECT \n\
ZICCLOUDSYNCINGOBJECT.ZIDENTIFIER, \n\
ZICCLOUDSYNCINGOBJECT.ZORIENTATION \n\
FROM \n\
ZICCLOUDSYNCINGOBJECT, \n\
ZICCLOUDSYNCINGOBJECT AS A \n\
WHERE \n\
A.Z_PK = ? \n\
AND \n\
ZICCLOUDSYNCINGOBJECT.ZIDENTIFIER LIKE A.ZIDENTIFIER || '%';";

void sql_find_file()
{
    NSString *path = nil;
    
    NSArray *URLs = [[NSFileManager defaultManager]
                     URLsForDirectory:NSLibraryDirectory
                     inDomains:NSUserDomainMask];
    
    if(URLs && [URLs count])
    {
        NSURL *libraryURL = [URLs objectAtIndex:0];
        
        //V7
        NSURL *groupContainerURL = [libraryURL URLByAppendingPathComponent:@"Group Containers"];
        NSURL *sqlParentURL = [groupContainerURL URLByAppendingPathComponent:@"group.com.apple.notes"];
        NSURL *sqlURL = [sqlParentURL URLByAppendingPathComponent:@"NoteStore.sqlite"];
        NSURL *mediaURL = [sqlParentURL URLByAppendingPathComponent:@"Media"];
        NSURL *previewURL = [sqlParentURL URLByAppendingPathComponent:@"Previews"];
        NSURL *fallbackImagesURL = [sqlParentURL URLByAppendingPathComponent:@"FallbackImages"];
        
        path = [sqlURL path];
        
        mediaPath = [mediaURL path];
        previewPath = [previewURL path];
        fallbackImagesPath = [fallbackImagesURL path];
    }
    sqlPath = path ? [path UTF8String] : NULL;
}

void setup()
{
    sql_find_file();
}

void clear()
{
    
}

#pragma mark UUID

NSString *uuidString()
{
    return [[[NSUUID UUID]UUIDString]stringByReplacingOccurrencesOfString:@"-" withString:@""];
}

#pragma mark JSON

void ob_set_d(PA_ObjectRef n, const wchar_t *name, NSDate *value, BOOL isGMT = YES)
{
    if(isGMT)
    {
        ob_set_s(n, name, value ? [[DateFormatter::GMT stringFromDate:value]UTF8String] : "");
    }else
    {
        ob_set_s(n, name, value ? [[DateFormatter::ISO stringFromDate:value]UTF8String] : "");
    }
}

#pragma mark Private

NotesNote *_getNote(PA_ObjectRef json)
{
    NotesNote *note = nil;
    
    NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
    
    if(application){
        
        SBElementArray *notes = [application notes];
        
        NSArray *noteIds = [notes arrayByApplyingSelector:@selector(id)];
        
        if([noteIds count])
        {
            CUTF16String _id;
            if(ob_get_a(json, L"id", &_id)){
                NSString *noteId = [[NSString alloc]initWithCharacters:(const unichar *)_id.c_str() length:_id.length()];
                if(noteId) {
                    
                    NSUInteger i = [noteIds indexOfObjectPassingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop)
                                    {
                        if ([(NSString*)obj isEqualToString:noteId])
                        {
                            return YES;
                        }
                        return NO;
                    }];
                    
                    if(NSNotFound != i)
                    {
                        note = [notes objectWithID:noteId];
                    }
                    [noteId release];
                }
            }
        }
    }
    
    return note;
}

NotesFolder *_getFolder(PA_ObjectRef json)
{
    NotesFolder *folder = nil;
    
    NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
    
    if(application){
        
        SBElementArray *folders = [application folders];
        
        NSArray *folderIds = [folders arrayByApplyingSelector:@selector(id)];
        
        if([folderIds count])
        {
            CUTF16String _id;
            if(ob_get_a(json, L"id", &_id)){
                NSString *folderId = [[NSString alloc]initWithCharacters:(const unichar *)_id.c_str() length:_id.length()];
                if(folderId) {
                    
                    NSUInteger i = [folderIds indexOfObjectPassingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop)
                                    {
                        if ([(NSString*)obj isEqualToString:folderId])
                        {
                            return YES;
                        }
                        return NO;
                    }];
                    
                    if(NSNotFound != i)
                    {
                        folder = [folders objectWithID:folderId];
                    }
                    
                    [folderId release];
                }
            }
        }
    }
    
    return folder;
}

NotesAccount *_getAccount(PA_ObjectRef json)
{
    NotesAccount *account = nil;
    
    NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
    
    if(application){
        SBElementArray *accounts = [application accounts];
        
        NSArray *accountIds = [accounts arrayByApplyingSelector:@selector(id)];
        
        if([accountIds count])
        {
            CUTF16String _id;
            if(ob_get_a(json, L"id", &_id)){
                NSString *accountId = [[NSString alloc]initWithCharacters:(const unichar *)_id.c_str() length:_id.length()];
                if(accountId) {
                    
                    NSUInteger i = [accountIds indexOfObjectPassingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop)
                                    {
                        if ([(NSString*)obj isEqualToString:accountId])
                        {
                            return YES;
                        }
                        return NO;
                    }];
                    
                    if(NSNotFound != i)
                    {
                        account = [accounts objectWithID:accountId];
                    }
                    
                    [accountId release];
                }
            }
        }
    }
    
    return account;
}

NotesAttachment *_getAttachment(PA_ObjectRef json)
{
    NotesAttachment *attachment = nil;
    
    NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
    
    if(application){
        SBElementArray *attachments = [application attachments];
        
        NSArray *attachmentsIds = [attachments arrayByApplyingSelector:@selector(id)];
        
        if([attachmentsIds count])
        {
            CUTF16String _id;
            if(ob_get_a(json, L"id", &_id)){
                NSString *attachmentId = [[NSString alloc]initWithCharacters:(const unichar *)_id.c_str() length:_id.length()];
                if(attachmentId) {
                    
                    NSUInteger i = [attachmentsIds indexOfObjectPassingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop)
                                    {
                        if ([(NSString*)obj isEqualToString:attachmentId])
                        {
                            return YES;
                        }
                        return NO;
                    }];
                    
                    if(NSNotFound != i)
                    {
                        attachment = [attachments objectWithID:attachmentId];
                    }
                    
                    [attachmentId release];
                }
            }
        }
    }
    
    return attachment;
}

void _getFolder(PA_CollectionRef n, NotesFolder *folder)
{
    PA_ObjectRef json = PA_CreateObject();
    
    ob_set_s(json, L"name", (const char *)[folder.name UTF8String]);
    ob_set_s(json, L"id", (const char *)[folder.id UTF8String]);
    
    PA_CollectionRef folders_array = PA_CreateCollection();
    
    NSArray *folders = [folder folders];
    for(NSUInteger i = 0; i < [folders count]; ++i)
    {
        _getFolder(folders_array, [folders objectAtIndex:i]);
    }
    
    ob_set_c(json, L"folders", folders_array);
    
    PA_Variable v = PA_CreateVariable(eVK_Object);
    PA_SetObjectVariable(&v, json);
    PA_SetCollectionElement(n, PA_GetCollectionLength(n), v);
    PA_ClearVariable(&v);
}

BOOL _createNote(PA_ObjectRef json)
{
    BOOL success = false;
    
    NotesFolder *folder = _getFolder(json);
    
    if(folder)
    {
        CUTF16String _name;
        if(ob_get_a(json, L"name", &_name)){
            NSString *title = [[NSString alloc]initWithCharacters:(const unichar *)_name.c_str() length:_name.length()];
            if(title) {
                CUTF16String _body;
                if(ob_get_a(json, L"body", &_body)){
                    NSString *body = [[NSString alloc]initWithCharacters:(const unichar *)_body.c_str() length:_body.length()];
                    if(body) {
                        
                        NSDictionary *notes_props = [[NSDictionary alloc]initWithObjectsAndKeys:
                                                     title, @"name",
                                                     body, @"body",
                                                     nil];
                        
                        
                        NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
                        
                        if(application){
                            NotesNote *note = [[[application classForScriptingClass:@"note"]alloc]
                                               initWithProperties:notes_props];
                            
                            [notes_props release];
                            
                            SBElementArray <NotesNote *>*notes = [folder notes];
                            
                            NSUInteger beforeCount = [notes count];
                            [notes insertObject:note atIndex:0];
                            [note release];
                            
                            if(beforeCount < [notes count]){
                                
                                note = [notes objectAtIndex:0];
                                
                                ob_set_s(json, L"id", [note.id UTF8String]);
                                ob_set_d(json, L"creationDate", note.creationDate);
                                ob_set_d(json, L"modificationDate", note.modificationDate);
                                ob_set_d(json, L"creationLocalDate", note.creationDate, NO);
                                ob_set_d(json, L"modificationLocalDate", note.modificationDate, NO);
                                
                                success = true;
                            }
                        }
                        
                        [body release];
                        
                    }
                }
                [title release];
            }
        }
    }
    
    return success;
}

void doScript(NSAppleEventDescriptor *event)
{
    //scpt
    NSString *script =
    @"on add_attachment(note_id, attachment_path) \n\
    tell application \"Notes\" \n\
    set the_note to note id note_id \n\
    set the_attachment to make new attachment at the_note with data attachment_path \n\
    end tell \n\
    end add_attachment";
    
    NSAppleScript *scriptObject = [[NSAppleScript alloc]initWithSource:script];
    
    if([scriptObject compileAndReturnError:nil])
    {
        [scriptObject executeAppleEvent:event error:nil];
    }
    [scriptObject release];
}

#pragma mark Public

void addAttachment(NotesNote *note, NSData *data, NSString *name)
{
    NSString *uniqueDirectoryPath = [NSTemporaryDirectory() stringByAppendingPathComponent:uuidString()];
    NSURL *uniqueDirectory = [NSURL fileURLWithPath:uniqueDirectoryPath];
    NSURL *dstPath = [uniqueDirectory URLByAppendingPathComponent:name];
    
    if([[NSFileManager defaultManager]createDirectoryAtURL:uniqueDirectory
                               withIntermediateDirectories:YES attributes:nil error:nil])
    {
        if([data writeToURL:dstPath atomically:YES])
        {
            NSString *script = [[NSString alloc]initWithFormat:
                                @"tell application \"%@\" \n\
                                set %@ to note id \"%@\" \n\
                                set %@ to make new attachment at end of attachments of %@ with data POSIX file \"%@\" \n\
                                end tell",
                                @"Notes",
                                @"the_note", note.id,
                                @"the_attachment", @"the_note", [dstPath path]];
            
//            NSLog(@"%@", script);
            
            NSAppleScript *scriptObject = [[NSAppleScript alloc]initWithSource:script];
            
            if([scriptObject compileAndReturnError:nil])
            {
                NSAppleEventDescriptor *returnValue = [scriptObject executeAndReturnError:nil];
//                NSLog(@"%@", returnValue);
            }
            
            [scriptObject release];
            [script release];
            
            //cleanup
            if([[NSFileManager defaultManager]removeItemAtPath:[dstPath path] error:nil])
            {
                [[NSFileManager defaultManager]removeItemAtPath:[uniqueDirectory path] error:nil];
            }
        }
    }
}

#pragma mark List

PA_CollectionRef getNotes()
{
    
    PA_CollectionRef notes_array = PA_CreateCollection();
    
    @autoreleasepool
    {
        NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
        
        if(application){
            SBElementArray *notes = [application notes];
            NSArray *noteNames = [notes arrayByApplyingSelector:@selector(name)];
            NSArray *noteIds = [notes arrayByApplyingSelector:@selector(id)];
            
            for(NSUInteger i = 0; i < [noteNames count]; ++i)
            {
                PA_ObjectRef item = PA_CreateObject();
                
                NSString *noteName = [noteNames objectAtIndex:i];
                NSString *noteId = [noteIds objectAtIndex:i];
                
                ob_set_s(item, L"name", [noteName UTF8String]);
                ob_set_s(item, L"id", [noteId UTF8String]);
                
                NotesNote *note = [notes objectAtIndex:i];
                
                PA_CollectionRef attachments_array = PA_CreateCollection();
                
                NSArray *attachmentIds = [[note attachments]arrayByApplyingSelector:@selector(id)];
                for(NSUInteger j = 0; j < [attachmentIds count]; ++j)
                {
                    PA_Variable v = PA_CreateVariable(eVK_Unistring);
                    C_TEXT t;
                    t.setUTF16String([attachmentIds objectAtIndex:j]);
                    PA_Unistring u = PA_CreateUnistring((PA_Unichar *)t.getUTF16StringPtr());
                    PA_SetStringVariable(&v, &u);
                    PA_SetCollectionElement(attachments_array, PA_GetCollectionLength(attachments_array), v);
                    PA_ClearVariable(&v);
                }
                
                ob_set_c(item, L"attachments", attachments_array);
                
                PA_Variable v = PA_CreateVariable(eVK_Object);
                PA_SetObjectVariable(&v, item);
                PA_SetCollectionElement(notes_array, PA_GetCollectionLength(notes_array), v);
                PA_ClearVariable(&v);
                
            }
        }
    }
    
    return notes_array;
}

PA_CollectionRef getFolders()
{
    
    PA_CollectionRef folders_array = PA_CreateCollection();
    
    @autoreleasepool
    {
        NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
        
        if(application){
            SBElementArray *folders = [application folders];
            NSArray *folderNames = [folders arrayByApplyingSelector:@selector(name)];
            NSArray *folderIds = [folders arrayByApplyingSelector:@selector(id)];
            
            for(NSUInteger i = 0; i < [folderNames count]; ++i)
            {
                PA_ObjectRef item = PA_CreateObject();
                
                NSString *folderName = [folderNames objectAtIndex:i];
                NSString *folderId = [folderIds objectAtIndex:i];
                
                ob_set_s(item, L"name", [folderName UTF8String]);
                ob_set_s(item, L"id", [folderId UTF8String]);
                
                NotesFolder *folder = [folders objectAtIndex:i];
                
                PA_CollectionRef notes_array = PA_CreateCollection();
                
                NSArray *noteIds = [[folder notes]arrayByApplyingSelector:@selector(id)];
                for(NSUInteger j = 0; j < [noteIds count]; ++j)
                {
                    PA_Variable v = PA_CreateVariable(eVK_Unistring);
                    C_TEXT t;
                    t.setUTF16String([noteIds objectAtIndex:j]);
                    PA_Unistring u = PA_CreateUnistring((PA_Unichar *)t.getUTF16StringPtr());
                    PA_SetStringVariable(&v, &u);
                    PA_SetCollectionElement(notes_array, PA_GetCollectionLength(notes_array), v);
                    PA_ClearVariable(&v);
                }
                
                ob_set_c(item, L"notes", notes_array);
                
                PA_CollectionRef subfolders_array = PA_CreateCollection();
                
                NSArray *subfolderIds = [[folder folders]arrayByApplyingSelector:@selector(id)];
                for(NSUInteger j = 0; j < [subfolderIds count]; ++j)
                {
                    PA_Variable v = PA_CreateVariable(eVK_Unistring);
                    C_TEXT t;
                    t.setUTF16String([subfolderIds objectAtIndex:j]);
                    PA_Unistring u = PA_CreateUnistring((PA_Unichar *)t.getUTF16StringPtr());
                    PA_SetStringVariable(&v, &u);
                    PA_SetCollectionElement(subfolders_array, PA_GetCollectionLength(subfolders_array), v);
                    PA_ClearVariable(&v);
                }
                
                ob_set_c(item, L"folders", subfolders_array);
                
                PA_Variable v = PA_CreateVariable(eVK_Object);
                PA_SetObjectVariable(&v, item);
                PA_SetCollectionElement(folders_array, PA_GetCollectionLength(folders_array), v);
                PA_ClearVariable(&v);
            }
        }
        
    }
    
    return folders_array;
}

PA_CollectionRef getAccounts()
{
    PA_CollectionRef accounts_array = PA_CreateCollection();
    
    @autoreleasepool
    {
        NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
        
        if(application){
            SBElementArray *accounts = [application accounts];
            
            NSArray *accountNames = [accounts arrayByApplyingSelector:@selector(name)];
            NSArray *accountIds = [accounts arrayByApplyingSelector:@selector(id)];
            
            for(NSUInteger i = 0; i < [accountNames count]; ++i)
            {
                PA_ObjectRef item = PA_CreateObject();
                
                NSString *accountName = [accountNames objectAtIndex:i];
                NSString *accountId = [accountIds objectAtIndex:i];
                
                ob_set_s(item, L"name", [accountName UTF8String]);
                ob_set_s(item, L"id", [accountId UTF8String]);
                
                NotesAccount *account = [accounts objectAtIndex:i];
                
                PA_CollectionRef folders_array = PA_CreateCollection();
                
                NSArray *folderIds = [[account folders]arrayByApplyingSelector:@selector(id)];
                for(NSUInteger j = 0; j < [folderIds count]; ++j)
                {
                    PA_Variable v = PA_CreateVariable(eVK_Unistring);
                    C_TEXT t;
                    t.setUTF16String([folderIds objectAtIndex:j]);
                    PA_Unistring u = PA_CreateUnistring((PA_Unichar *)t.getUTF16StringPtr());
                    PA_SetStringVariable(&v, &u);
                    PA_SetCollectionElement(folders_array, PA_GetCollectionLength(folders_array), v);
                    PA_ClearVariable(&v);
                }
                
                ob_set_c(item, L"folders", folders_array);
                
                PA_Variable v = PA_CreateVariable(eVK_Object);
                PA_SetObjectVariable(&v, item);
                PA_SetCollectionElement(accounts_array, PA_GetCollectionLength(accounts_array), v);
                PA_ClearVariable(&v);
                
            }
        }
        
    }
    
    return accounts_array;
}

PA_CollectionRef getAttachments()
{
    PA_CollectionRef attachments_array = PA_CreateCollection();
    
    @autoreleasepool
    {
        NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
        
        if(application){
            SBElementArray *attachments = [application attachments];
            NSArray *attachmentNames = [attachments arrayByApplyingSelector:@selector(name)];
            NSArray *attachmentIds = [attachments arrayByApplyingSelector:@selector(id)];
            NSArray *attachmentNotes = [attachments arrayByApplyingSelector:@selector(container)];
            
            for(NSUInteger i = 0; i < [attachments count]; ++i)
            {
                PA_ObjectRef item = PA_CreateObject();
                
                NSString *attachmentName = [attachmentNames objectAtIndex:i];
                NSString *attachmentId = [attachmentIds objectAtIndex:i];
                NotesNote *note = [attachmentNotes objectAtIndex:i];
                
                ob_set_s(item, L"name", [attachmentName UTF8String]);
                ob_set_s(item, L"id", [attachmentId UTF8String]);
                ob_set_s(item, L"note", [note.id UTF8String]);
                
                PA_Variable v = PA_CreateVariable(eVK_Object);
                PA_SetObjectVariable(&v, item);
                PA_SetCollectionElement(attachments_array, PA_GetCollectionLength(attachments_array), v);
                PA_ClearVariable(&v);
                
            }
            
        }
        
    }
    
    return attachments_array;
}

#pragma mark Item

PA_ObjectRef getNote(C_TEXT &note_id)
{
    PA_ObjectRef json = PA_CreateObject();
    
    CUTF16String _note_id;
    note_id.copyUTF16String(&_note_id);
    ob_set_a(json, L"id", &_note_id);
    
    NotesNote *note = _getNote(json);
    
    if(note)
    {
        NotesFolder *folder = note.container.get;
        
        ob_set_s(json, L"folder", [folder.id UTF8String]);
        ob_set_s(json, L"name", [note.name UTF8String]);
        ob_set_s(json, L"body", [note.body UTF8String]);
        ob_set_d(json, L"creationDate", note.creationDate);
        ob_set_d(json, L"modificationDate", note.modificationDate);
        ob_set_d(json, L"creationLocalDate", note.creationDate, NO);
        ob_set_d(json, L"modificationLocalDate", note.modificationDate, NO);
        
        //attachments
        PA_CollectionRef attachments_array = PA_CreateCollection();
        
        NSArray *attachmentIds = [[note attachments]arrayByApplyingSelector:@selector(id)];
        for(NSUInteger i = 0; i < [attachmentIds count]; ++i)
        {
            PA_Variable v = PA_CreateVariable(eVK_Unistring);
            C_TEXT t;
            t.setUTF16String([attachmentIds objectAtIndex:i]);
            PA_Unistring u = PA_CreateUnistring((PA_Unichar *)t.getUTF16StringPtr());
            PA_SetStringVariable(&v, &u);
            PA_SetCollectionElement(attachments_array, PA_GetCollectionLength(attachments_array), v);
            PA_ClearVariable(&v);
        }
        
        ob_set_c(json, L"attachments", attachments_array);
        
    }else{
        
        PA_DisposeObject(json);
        json = PA_CreateObject();
        
    }
    
    return json;
    
}

PA_ObjectRef getFolder(C_TEXT &folder_id)
{
    PA_ObjectRef json = PA_CreateObject();
    
    CUTF16String _folder_id;
    folder_id.copyUTF16String(&_folder_id);
    ob_set_a(json, L"id", &_folder_id);
    
    NotesFolder *folder = _getFolder(json);
    
    if(folder)
    {
        ob_set_s(json, L"name", [folder.name UTF8String]);
        ob_set_s(json, L"id", [folder.id UTF8String]);
        
        NSArray *folders = [folder folders];
        
        PA_CollectionRef folders_array = PA_CreateCollection();
        
        for(NSUInteger i = 0; i < [folders count]; ++i)
        {
            _getFolder(folders_array, [folders objectAtIndex:i]);
        }
        
        ob_set_c(json, L"folders", folders_array);
        
        PA_CollectionRef notes_array = PA_CreateCollection();
        
        NSArray *noteIds = [[folder notes]arrayByApplyingSelector:@selector(id)];
        NSArray *noteNames = [[folder notes]arrayByApplyingSelector:@selector(name)];
        
        for(NSUInteger j = 0; j < [noteIds count]; ++j)
        {
            
            PA_ObjectRef item = PA_CreateObject();
            
            ob_set_s(item, L"name", [[noteNames objectAtIndex:j] UTF8String]);
            ob_set_s(item, L"id", [[noteIds objectAtIndex:j] UTF8String]);
            
            PA_Variable v = PA_CreateVariable(eVK_Object);
            PA_SetObjectVariable(&v, item);
            PA_SetCollectionElement(notes_array, PA_GetCollectionLength(notes_array), v);
            PA_ClearVariable(&v);
        }
        
        ob_set_c(json, L"notes", notes_array);
        
    }else{
        
        PA_DisposeObject(json);
        json = PA_CreateObject();
        
    }
    
    
    return json;
}

PA_ObjectRef getAccount(C_TEXT &account_id)
{
    PA_ObjectRef json = PA_CreateObject();
    
    CUTF16String _account_id;
    account_id.copyUTF16String(&_account_id);
    ob_set_a(json, L"id", &_account_id);
    
    NotesAccount *account = _getAccount(json);
    
    if(account)
    {
        ob_set_s(json, L"name", [account.name UTF8String]);
        ob_set_s(json, L"id", [account.id UTF8String]);
        
        PA_CollectionRef folders_array = PA_CreateCollection();
        
        NSArray *folders = [account folders];
        for(NSUInteger i = 0; i < [folders count]; ++i)
        {
            _getFolder(folders_array, [folders objectAtIndex:i]);
        }
        
        ob_set_c(json, L"folders", folders_array);
        
    }else{
        
        PA_DisposeObject(json);
        json = PA_CreateObject();
        
    }
    
    return json;
    
}

PA_ObjectRef getAttachment(C_TEXT &attachment_id)
{
    PA_ObjectRef json = PA_CreateObject();
    
    CUTF16String _attachment_id;
    attachment_id.copyUTF16String(&_attachment_id);
    ob_set_a(json, L"id", &_attachment_id);
    
    NotesAttachment *attachment = _getAttachment(json);
    
    if(attachment)
    {
        NSString *script = [[NSString alloc]initWithFormat:
                            @"tell application \"%@\" \n\
                            contents of attachment id \"%@\" as Unicode text \n\
                            end tell",
                            @"Notes",
                            attachment.id];
        
        NSAppleScript *scriptObject = [[NSAppleScript alloc]initWithSource:script];
        
        if([scriptObject compileAndReturnError:nil])
        {
            NSAppleEventDescriptor *returnValue = [scriptObject executeAndReturnError:nil];
            ob_set_s(json, L"contents", [returnValue.stringValue UTF8String]);
        }
        
        [scriptObject release];
        [script release];

        NotesNote *note = attachment.container.get;
        ob_set_s(json, L"note", [note.id UTF8String]);
        
        ob_set_d(json, L"creationDate", attachment.creationDate);
        ob_set_d(json, L"modificationDate", attachment.modificationDate);
        ob_set_d(json, L"creationLocalDate", attachment.creationDate, NO);
        ob_set_d(json, L"modificationLocalDate", attachment.modificationDate, NO);
        ob_set_s(json, L"contentIdentifier", [attachment.contentIdentifier UTF8String]);
        ob_set_s(json, L"name", [attachment.name UTF8String]);
        
    }else{
        
        PA_DisposeObject(json);
        json = PA_CreateObject();
        
    }
    
    return json;
    
}

#pragma mark -

PA_ObjectRef createFolder(PA_PluginParameters params)
{
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    PA_ObjectRef json = PA_CreateObject();
    
    CUTF16String _parent_id;
    Param1.copyUTF16String(&_parent_id);
    ob_set_a(json, L"id", &_parent_id);
    
    NotesFolder *folder = _getFolder(json);
    
    SBObject<NotesGenericMethods> *parent = nil;
    SBElementArray *parentFolders = nil;
    
    if(Param2.getUTF16Length())
    {
        if(folder)
        {
            parentFolders = [folder folders];
            parent = folder;
            
        }else
        {
            NotesAccount *account = _getAccount(json);
            
            if(account)
            {
                parentFolders = [account folders];
                parent = account;
            }
        }
    }
    
    if(parent)
    {
        NSString *title = Param2.copyUTF16String();
        NSDictionary *folders_props = [[NSDictionary alloc]initWithObjectsAndKeys:
                                       title, @"name",
                                       nil];
        [title release];
        
        @autoreleasepool
        {
            NotesApplication *application = [SBApplication applicationWithBundleIdentifier:NOTES_APP_ID];
            
            if(application){
                NotesFolder *folder = [[[application classForScriptingClass:@"folder"]alloc]
                                       initWithProperties:folders_props];
                [folders_props release];
                
                NSUInteger beforeCount = [parentFolders count];
                [parentFolders insertObject:folder atIndex:0];
                [folder release];
                
                if(beforeCount < [parentFolders count]){
                    
                    folder = [parentFolders objectAtIndex:0];
                    
                    ob_set_s(json, L"id", [folder.id UTF8String]);
                    ob_set_s(json, L"name", [folder.name UTF8String]);
                    
                }else{
                    
                    PA_DisposeObject(json);
                    json = PA_CreateObject();
                    
                }
            }
        }
        
    }else{
        
        PA_DisposeObject(json);
        json = PA_CreateObject();
        
    }
    
    return json;
}

PA_ObjectRef createNote(PA_PluginParameters params)
{
#define CMD_CONVERT_PICTURE 1002
#define kcpRetainOnly 1
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT folder;
    C_TEXT title;
    C_TEXT body;
    
    folder.fromParamAtIndex(pParams, 1);
    title.fromParamAtIndex(pParams, 2);
    body.fromParamAtIndex(pParams, 3);
    
    PA_ObjectRef json = PA_CreateObject();
    
    CUTF16String _folder;
    folder.copyUTF16String(&_folder);
    ob_set_a(json, L"id", &_folder);
    
    CUTF16String _title;
    title.copyUTF16String(&_title);
    ob_set_a(json, L"name", &_title);
    
    CUTF16String _body;
    body.copyUTF16String(&_body);
    ob_set_a(json, L"body", &_body);
    
    if(_createNote(json)){
        
        NotesNote *note = _getNote(json);
        
        if(note)
        {
            //PA_GetVariableParameter
            PA_Variable attachments = PA_GetVariableParameter(params, 4);
            PA_Variable names = PA_GetVariableParameter(params, 5);
            
            if(attachments.fType == eVK_ArrayPicture)
            {
                unsigned int param4_count = PA_GetArrayNbElements(attachments);
                for(unsigned int i = 0; i <= param4_count; ++i)
                {
                    PA_Picture p = PA_GetPictureInArray(attachments, i);
                    if(p)
                    {
                        p = PA_DuplicatePicture(p, kcpRetainOnly);
                        PA_Variable args[2];
                        args[0] = PA_CreateVariable(eVK_Picture);
                        PA_SetPictureVariable(&args[0], p);// disposed each time with PA_ClearVariable
                        args[1] = PA_CreateVariable(eVK_Unistring);
                        PA_Unistring codec = PA_CreateUnistring((PA_Unichar *)".\0p\0n\0g\0\0\0");
                        PA_SetStringVariable(&args[1], &codec);// disposed each time with PA_ClearVariable
                        PA_ExecuteCommandByID(CMD_CONVERT_PICTURE, args, 2);
                        p = PA_GetPictureVariable(args[0]); // a new picture is created
                        PA_Handle h = PA_NewHandle(0);
                        PA_GetPictureData(p, 1, h);
                        if(PA_GetLastError() == eER_NoErr)
                        {
                            NSData *data = [[NSData alloc]initWithBytes:PA_LockHandle(h) length:PA_GetHandleSize(h)];
                            
                            NSString *name = nil;
                            
                            if((names.fType == eVK_ArrayUnicode) && (PA_GetArrayNbElements(names) <= i))
                            {
                                PA_Unistring u = PA_GetStringInArray(names, i);
                                name = [[NSString alloc]initWithCharacters:(const unichar *)u.fString  length:u.fLength];
                                
                            }else{
                                name = [[NSString alloc]initWithFormat:@"%@.png", uuidString()];
                            }
                            
                            if(name){
                                addAttachment(note, data, name);
                                [name release];
                            }
                            
                            [data release];
                            
                            PA_UnlockHandle(h);
                        }
                        PA_DisposeHandle(h);
                    }//p
                }//count
            }//eVK_ArrayPicture
            
            
            if(attachments.fType == eVK_ArrayBlob)
            {
                unsigned int param4_count = PA_GetArrayNbElements(attachments);
                for(unsigned int i = 0; i <= param4_count; ++i)
                {
                    PA_Blob b = PA_GetBlobInArray(attachments, i);
                    if(b.fSize)
                    {
                        PA_Handle h = b.fHandle;
                        NSData *data = [[NSData alloc]initWithBytes:PA_LockHandle(h) length:PA_GetHandleSize(h)];
                        
                        NSString *name = nil;
                        
                        if((names.fType == eVK_ArrayUnicode) && (PA_GetArrayNbElements(names) <= i))
                        {
                            PA_Unistring u = PA_GetStringInArray(names, i);
                            name = [[NSString alloc]initWithCharacters:(const unichar *)u.fString  length:u.fLength];
                            
                        }else{
                            name = [[NSString alloc]initWithFormat:@"%@", uuidString()];
                        }
                        
                        if(name){
                            addAttachment(note, data, name);
                            [name release];
                        }
                        
                        [data release];
                        PA_UnlockHandle(h);
                    }//b
                }//count
            }//eVK_ArrayBlob
            
        }
        
    }else{
        
        PA_DisposeObject(json);
        json = PA_CreateObject();
        
    }
    
    return json;
    
}
}

#pragma mark -

void OnExit()
{
    DateFormatter::clear();
    Notes::clear();
}

void OnStartup()
{
    DateFormatter::setup();
    Notes::setup();
    
    requestPermission();
}

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
    try
    {
        switch(selector)
        {
            case kInitPlugin :
            case kServerInitPlugin :
                OnStartup();
                break;
                
            case kDeinitPlugin :
            case kServerDeinitPlugin :
                OnExit();
                break;
                
                // --- Notes
                
            case 1 :
                Notes_Create_note(params);
                break;
            case 2 :
                Notes_GET_FOLDERS(params);
                break;
            case 3 :
                Notes_GET_NOTES(params);
                break;
            case 4 :
                Notes_GET_ATTACHMENTS(params);
                break;
            case 5 :
                Notes_GET_ACCOUNTS(params);
                break;
            case 6 :
                Notes_Create_folder(params);
                break;
            case 7 :
                Notes_SET_NOTIFICATION(params);
                break;
            case 8 :
                Notes_Get_notification(params);
                break;
            case 9 :
                Notes_Get_attachment(params);
                break;
            case 10 :
                Notes_Get_note(params);
                break;
            case 11 :
                Notes_Get_folder(params);
                break;
            case 12 :
                Notes_Get_account(params);
                break;
            case 13 :
                Notes_SHOW(params);
                break;
        }
    }
    catch(...)
    {
        
    }
}

#pragma mark -

static void AppleScript_Notes_SHOW_by_ID(NSAppleEventDescriptor *event) {
    
    NSString *script = \
  @"on showNotes(note_content) \n\
        tell application \"Notes\" \n\
            set nn to notes whose id is note_content \n\
            repeat with n in nn \n\
                show n \n\
            end repeat \n\
        end tell \n\
    end showNotes";
        
    NSAppleScript *scriptObject = [[NSAppleScript alloc]initWithSource:script];
    
    if([scriptObject compileAndReturnError:nil]) {
        [scriptObject executeAppleEvent:event error:nil];
    }
    [scriptObject release];
}

static void AppleScript_Notes_SHOW(NSAppleEventDescriptor *event) {
    
    NSString *script = \
  @"on showNotes(note_content) \n\
        tell application \"Notes\" \n\
            set nn to notes whose plaintext contains note_content \n\
            repeat with n in nn \n\
                show n \n\
            end repeat \n\
        end tell \n\
    end showNotes";
        
    NSAppleScript *scriptObject = [[NSAppleScript alloc]initWithSource:script];
    
    if([scriptObject compileAndReturnError:nil]) {
        [scriptObject executeAppleEvent:event error:nil];
    }
    [scriptObject release];
}

void Notes_SHOW(PA_PluginParameters params) {
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT _plainText;
    _plainText.fromParamAtIndex(pParams, 1);
    NSString *plainText = _plainText.copyUTF16String();
        
    NSAppleEventDescriptor *parameters = [NSAppleEventDescriptor listDescriptor];
    NSAppleEventDescriptor *note_content = [NSAppleEventDescriptor descriptorWithString:plainText];
    [parameters insertDescriptor:note_content atIndex:1];
    
    ProcessSerialNumber psn = {0, kCurrentProcess};
    NSAppleEventDescriptor *target =
    [NSAppleEventDescriptor
     descriptorWithDescriptorType:typeProcessSerialNumber
     bytes:&psn
     length:sizeof(ProcessSerialNumber)];
    
    NSAppleEventDescriptor *handler = [NSAppleEventDescriptor descriptorWithString:@"showNotes"];
    
    NSAppleEventDescriptor *event =
    [NSAppleEventDescriptor appleEventWithEventClass:kASAppleScriptSuite
                                             eventID:kASSubroutineEvent
                                    targetDescriptor:target
                                            returnID:kAutoGenerateReturnID
                                       transactionID:kAnyTransactionID];
    
    [event setParamDescriptor:handler forKeyword:keyASSubroutineName];
    [event setParamDescriptor:parameters forKeyword:keyDirectObject];
       
    if([plainText hasPrefix:@"x-coredata://"]) {
        AppleScript_Notes_SHOW_by_ID(event);
    }else{
        AppleScript_Notes_SHOW(event);
    }
    
    [plainText release];
}

#pragma mark -

void Notes_Create_note(PA_PluginParameters params) {
    
    PA_ObjectRef note = Notes::createNote(params);
    
    PA_ReturnObject(params, note);
}

void Notes_Create_folder(PA_PluginParameters params) {
    
    PA_ObjectRef folder = Notes::createFolder(params);
    
    PA_ReturnObject(params, folder);
}

void Notes_GET_FOLDERS(PA_PluginParameters params) {
    
    PA_CollectionRef folder = Notes::getFolders();
    
    PA_ReturnCollection(params, folder);
}

void Notes_GET_NOTES(PA_PluginParameters params) {
    
    PA_CollectionRef notes = Notes::getNotes();
    
    PA_ReturnCollection(params, notes);
}

void Notes_GET_ATTACHMENTS(PA_PluginParameters params) {
    
    PA_CollectionRef attachements = Notes::getAttachments();
    
    PA_ReturnCollection(params, attachements);
}

void Notes_GET_ACCOUNTS(PA_PluginParameters params) {
    
    PA_CollectionRef accounts = Notes::getAccounts();
    
    PA_ReturnCollection(params, accounts);
}

void Notes_SET_NOTIFICATION(PA_PluginParameters params) {
    
    //    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    //    PackagePtr pParams = (PackagePtr)params->fParameters;
    
}

void Notes_Get_notification(PA_PluginParameters params) {
    
    //    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    //    PackagePtr pParams = (PackagePtr)params->fParameters;
    
}

#define USE_SQLITE3 0
void Notes_Get_attachment(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
        
#if USE_SQLITE3
    NSString *attachment_id = Param1.copyUTF16String();
    if(Notes::attachment_regex)
    {
        NSTextCheckingResult *match = [Notes::attachment_regex firstMatchInString:attachment_id
                                     options:NSMatchingAnchored
                                       range:NSMakeRange(0, [attachment_id length])];
        if((match) && ([match numberOfRanges] > 1))
        {
            NSRange range = [match rangeAtIndex:1];
            NSString *Z_PK = [attachment_id substringWithRange:range];
            
            sqlite3 *notesStore = NULL;
            if(Notes::sqlPath)
            {
                if(SQLITE_OK == sqlite3_open(Notes::sqlPath, &notesStore))
                {
                    CUTF8String attachment_id;
                    Param1.copyUTF8String(&attachment_id);
                    const char *PK = [Z_PK UTF8String];
                    
                    sqlite3_stmt *sql0 = NULL;
                    if(SQLITE_OK == sqlite3_prepare_v2(notesStore, Notes::SQL_GET_NOTE_ATTACHMENT_TYPE, 1024, &sql0, NULL))
                    {
                        sqlite3_bind_text(sql0, 1, (const char *)PK, (int)strlen(PK), NULL);
                        NSString *media_type = nil;
                        while(SQLITE_ROW == sqlite3_step(sql0))
                        {
                            media_type = SQL::toString(sqlite3_column_text(sql0, 0));
                        }
                        if([media_type isEqualToString:@"com.apple.drawing"])
                        {
                            sqlite3_stmt *sql2 = NULL;
                            if(SQLITE_OK == sqlite3_prepare_v2(notesStore, Notes::SQL_GET_NOTE_ATTACHMENT_PREVIEW, 1024, &sql2, NULL))
                            {
                                sqlite3_bind_text(sql2, 1, (const char *)PK, (int)strlen(PK), NULL);
                                bool with_orientation = NO;
                                while(SQLITE_ROW == sqlite3_step(sql2))
                                {
                                    NSString *preview_id = SQL::toString(sqlite3_column_text(sql2, 0));
                                    NSString *preview_orientation = SQL::toString(sqlite3_column_text(sql2, 1));
                                    //                                    if([preview_orientation isEqualToString:@"2"])
                                    //                                    {
                                    //                                        with_orientation = YES;
                                    //                                    }
                                    NSString *fallbackImagesPath = [Notes::fallbackImagesPath stringByAppendingPathComponent:preview_id];
                                    //                                    if(with_orientation)
                                    //                                    {
                                    //                                        NSString *mediaPath = [fallbackImagesPath stringByAppendingString:@".jpg"];
                                    //                                        returnValue.setPath(mediaPath);
                                    //                                    }else
                                    //                                    {
                                    NSString *mediaPath = [fallbackImagesPath stringByAppendingString:@".jpg"];
                                    returnValue.setPath(mediaPath);
                                    //                                    }
                                }
                            }
                        }/* com.apple.drawing */
                        else
                            if([media_type isEqualToString:@"com.apple.notes.sketch"])
                            {
                                sqlite3_stmt *sql2 = NULL;
                                if(SQLITE_OK == sqlite3_prepare_v2(notesStore, Notes::SQL_GET_NOTE_ATTACHMENT_PREVIEW, 1024, &sql2, NULL))
                                {
                                    sqlite3_bind_text(sql2, 1, (const char *)PK, (int)strlen(PK), NULL);
                                    bool with_orientation = NO;
                                    while(SQLITE_ROW == sqlite3_step(sql2))
                                    {
                                        NSString *preview_id = SQL::toString(sqlite3_column_text(sql2, 0));
                                        NSString *preview_orientation = SQL::toString(sqlite3_column_text(sql2, 1));
                                        if([preview_orientation isEqualToString:@"2"])
                                        {
                                            with_orientation = YES;
                                        }
                                        NSString *previewPath = [Notes::previewPath stringByAppendingPathComponent:preview_id];
                                        if(with_orientation)
                                        {
                                            NSString *mediaPath = [previewPath stringByAppendingString:@"-oriented.png"];
                                            returnValue.setPath(mediaPath);
                                        }else
                                        {
                                            NSString *mediaPath = [previewPath stringByAppendingString:@".png"];
                                            returnValue.setPath(mediaPath);
                                        }
                                    }
                                }
                            }/* com.apple.notes.sketch */
                            else
                            {
                                sqlite3_stmt *sql1 = NULL;
                                if(SQLITE_OK == sqlite3_prepare_v2(notesStore, Notes::SQL_GET_NOTE_ATTACHMENT, 1024, &sql1, NULL))
                                {
                                    sqlite3_bind_text(sql1, 1, (const char *)PK, (int)strlen(PK), NULL);
                                    while(SQLITE_ROW == sqlite3_step(sql1))
                                    {
                                        NSString *media_folder_id = SQL::toString(sqlite3_column_text(sql1, 0));
                                        NSString *media_file_name = SQL::toString(sqlite3_column_text(sql1, 1));
                                        if([media_folder_id length] && [media_file_name length])
                                        {
                                            NSString *mediaFolderPath = [Notes::mediaPath stringByAppendingPathComponent:media_folder_id];
                                            NSString *mediaPath = [mediaFolderPath stringByAppendingPathComponent:media_file_name];
                                            returnValue.setPath(mediaPath);
                                        }
                                    }
                                }
                            }
                    }
                    sqlite3_close(notesStore);
                }
            }
        }
    }
#endif
    
    PA_ObjectRef attachment = Notes::getAttachment(Param1);
    
    PA_ReturnObject(params, attachment);
}

void Notes_Get_note(PA_PluginParameters params) {
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    PA_ObjectRef note = Notes::getNote(Param1);
    
    PA_ReturnObject(params, note);
}

void Notes_Get_folder(PA_PluginParameters params) {
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    PA_ObjectRef folder = Notes::getFolder(Param1);
    
    PA_ReturnObject(params, folder);
}

void Notes_Get_account(PA_PluginParameters params) {
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    PA_ObjectRef account = Notes::getAccount(Param1);
    
    PA_ReturnObject(params, account);
}
